package com.tien.scheduled.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

@Service
public class RetentionJobService {

    @Autowired
    private JdbcTemplate centralJdbc;

    @Autowired
    private DataSource defaultDataSource;

    private static final Logger log = LoggerFactory.getLogger(RetentionJobService.class);

    // G·ª≠i th√¥ng b√°o n·∫øu s·∫Øp ƒë·∫øn h·∫°n
    // T√™n job	                Th·ªùi ƒëi·ªÉm ch·∫°y	        ƒêi·ªÅu ki·ªán ch√≠nh	                    M·ª•c ti√™u
    // notifyExpiringTenants()	M·ªói ng√†y 3h s√°ng	Tenant >= 2 nƒÉm, ch∆∞a ƒë∆∞·ª£c th√¥ng b√°o	G·ª≠i c·∫£nh b√°o d·ªØ li·ªáu s·∫Øp x√≥a
    @Scheduled(cron = "0 0 3 * * *") // 3h s√°ng m·ªói ng√†y
    public void notifyExpiringTenants() {
        String sql = """
        SELECT t.tenant_id, t.schema_name, t.data_retention_years, t.created_at
        FROM tenants t
        WHERE t.plan = 'basic'
          AND t.is_active = TRUE
          AND t.created_at <= DATE_SUB(NOW(), INTERVAL 2 YEAR)
          AND NOT EXISTS (
              SELECT 1 FROM retention_notifications r
              WHERE r.tenant_id = t.tenant_id AND r.resolved = FALSE
          )
    """;

        List<Map<String, Object>> tenants = centralJdbc.queryForList(sql);

        System.out.println("üîé S·ªë tenant ƒë·ªß ƒëi·ªÅu ki·ªán g·ª≠i c·∫£nh b√°o: " + tenants.size());

        for (Map<String, Object> tenant : tenants) {
            String tenantId = (String) tenant.get("tenant_id");
            log.info("üì© ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi tenant: {}", tenant);
            String schema = (String) tenant.get("schema_name");
            int retentionYears = (int) tenant.get("data_retention_years");

            // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu c≈© trong schema kh√¥ng
            String checkDataSql = "SELECT EXISTS (SELECT 1 FROM " + schema + ".orders WHERE created_at < DATE_SUB(NOW(), INTERVAL ? YEAR))";
            Boolean hasOldData = centralJdbc.queryForObject(checkDataSql, Boolean.class, retentionYears);

            if (Boolean.FALSE.equals(hasOldData)) {
                System.out.println("‚ùé Tenant " + tenantId + " kh√¥ng c√≥ d·ªØ li·ªáu c≈©, b·ªè qua.");
                continue; // Kh√¥ng g·ª≠i n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu s·∫Øp b·ªã x√≥a
            }

            centralJdbc.update("""
            INSERT INTO retention_notifications (tenant_id, message)
            VALUES (?, ?)
        """, tenantId, "‚è≥ D·ªØ li·ªáu c≈© c·ªßa b·∫°n s·∫Øp b·ªã x√≥a. H√£y n√¢ng c·∫•p g√≥i d·ªãch v·ª• ƒë·ªÉ gi·ªØ d·ªØ li·ªáu!");

            System.out.println("üì© ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi tenant: " + tenantId);
        }
    }

    // T√™n job	                    Th·ªùi ƒëi·ªÉm ch·∫°y	        ƒêi·ªÅu ki·ªán ch√≠nh	                        M·ª•c ti√™u
    // emindFinalWarningTenants()	M·ªói ng√†y 8h s√°ng	  ƒê√£ ƒë∆∞·ª£c th√¥ng b√°o t·ª´ 23-29 ng√†y tr∆∞·ªõc	    Nh·∫Øc m·ªói ng√†y cho t·ªõi l√∫c x√≥a
    // Xo√° d·ªØ li·ªáu sau 30 ng√†y n·∫øu ch∆∞a n√¢ng c·∫•p
    @Scheduled(cron = "0 0 4 * * *") // 4h s√°ng m·ªói ng√†y
    public void deleteExpiredData() {
        String sql = """
        SELECT r.tenant_id, t.schema_name, t.data_retention_years
        FROM retention_notifications r
        JOIN tenants t ON t.tenant_id = r.tenant_id
        WHERE r.resolved = FALSE
          AND r.notified_at <= DATE_SUB(NOW(), INTERVAL 30 DAY)
          AND t.plan = 'basic'
          AND t.created_at <= DATE_SUB(NOW(), INTERVAL 2 YEAR)
    """;

        List<Map<String, Object>> rows = centralJdbc.queryForList(sql);
        for (Map<String, Object> row : rows) {
            String tenantId = (String) row.get("tenant_id");
            String schema = (String) row.get("schema_name");
            int retentionYears = (int) row.get("data_retention_years");

            try (Connection conn = defaultDataSource.getConnection()) {
                Statement stmt = conn.createStatement();
                stmt.execute("USE " + schema);
                int deleted = stmt.executeUpdate("DELETE FROM orders WHERE created_at < DATE_SUB(NOW(), INTERVAL " + retentionYears + " YEAR)");
                System.out.println("üóëÔ∏è ƒê√£ x√≥a " + deleted + " b·∫£n ghi c·ªßa tenant: " + tenantId);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi x√≥a d·ªØ li·ªáu tenant " + tenantId + ": " + e.getMessage());
            }

            // C·∫≠p nh·∫≠t resolved = true
            String updateSql = """
                                UPDATE central_db.retention_notifications SET resolved = TRUE WHERE tenant_id = ?
                            """;
            centralJdbc.update(updateSql, tenantId);
        }
    }

    // T√™n job	                Th·ªùi ƒëi·ªÉm ch·∫°y	        ƒêi·ªÅu ki·ªán ch√≠nh	                    M·ª•c ti√™u
    // deleteExpiredData()	M·ªói ng√†y 4h s√°ng	ƒê√£ th√¥ng b√°o >30 ng√†y, ch∆∞a n√¢ng c·∫•p	X√≥a d·ªØ li·ªáu th·∫≠t s·ª±
    //Nh·∫Øc tenant kh√¥ng b·ªã b·ªè s√≥t (v√¨ c√≥ th·ªÉ h·ªç qu√™n).
    //TƒÉng t·ª∑ l·ªá n√¢ng c·∫•p d·ªãch v·ª• (chuy·ªÉn t·ª´ basic ‚Üí premium/forever)
    //ƒê·∫£m b·∫£o b·∫°n kh√¥ng b·ªã khi·∫øu n·∫°i sau khi x√≥a d·ªØ li·ªáu.
    // Ch·∫°y m·ªói ng√†y, t√¨m c√°c tenant ƒë√£ ƒë∆∞·ª£c g·ª≠i th√¥ng b√°o tr∆∞·ªõc ƒë√≥ t·ª´ 23 ƒë·∫øn 29 ng√†y, v√† g·ª≠i nh·∫Øc nh·ªü m·ªói ng√†y cho ƒë·∫øn l√∫c b·ªã x√≥a.
    @Scheduled(cron = "0 0 8 * * *") // 8h s√°ng m·ªói ng√†y
    public void remindFinalWarningTenants() {
        String sql = """
        SELECT r.tenant_id, t.schema_name, t.name, DATEDIFF(NOW(), r.notified_at) AS days_since_notify
        FROM retention_notifications r
        JOIN tenants t ON t.tenant_id = r.tenant_id
        WHERE r.resolved = FALSE
          AND DATEDIFF(NOW(), r.notified_at) BETWEEN 23 AND 29
    """;

        List<Map<String, Object>> tenants = centralJdbc.queryForList(sql);

        for (Map<String, Object> tenant : tenants) {
            String tenantId = (String) tenant.get("tenant_id");
            String name = (String) tenant.get("name");
            Number days = (Number) tenant.get("days_since_notify");
            int daysSinceNotify = days != null ? days.intValue() : 0;
            int daysLeft = 30 - daysSinceNotify;

            // G·ª≠i nh·∫Øc nh·ªü (email/th√¥ng b√°o h·ªá th·ªëng)
            System.out.printf("üîî Nh·∫Øc nh·ªü %s: C√≤n %d ng√†y n·ªØa s·∫Ω x√≥a d·ªØ li·ªáu! (tenant_id = %s)%n", name, daysLeft, tenantId);

            // N·∫øu b·∫°n c√≥ service g·ª≠i email/push, g·ªçi ·ªü ƒë√¢y
        }
    }
}
